<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <title>User Information</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f4f4f4;
                margin: 0;
                padding: 0;
            }

            .container {
                max-width: 600px;
                margin: 50px auto;
                background: #fff;
                padding: 30px;
                border-radius: 5px;
                box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);

            }

            h2 {
                text-align: center;
                margin-bottom: 20px;
            }
            h4 {
                text-align: center;
                margin-bottom: 20px;
                color: #0056b3;
            }

            label {
                display: block;
                margin: 10px 0;
                size: 20px;
            }

            input[type="text"], input[type="password"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            }

            button {
                display: block;
                width: 20%;
                padding: 10px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                margin-top: 10px;
            }

            button:hover {
                background-color: #0056b3;
            }
            .input-group {
                display: inline-block; /* Display divs inline-block */
                margin-right: 20px; /* Add some space between the fields */
            }
            .spacer {
                height: 20px;
            }

        </style>
    </head>

    <body>
        <div class="container">
            <% if (person) { %>
                <div>
                <h2>Welcome <%= person.firstName %> <%= person.lastName %></h2>
                </div>
                <form id="extraFieldsForm" action="/existing_user/addEntry" method="post" enctype="multipart/form-data">
        
                    <h3 class="new-measurement-title">Please Add Your New Measurement:</h3>
                    
                    <!-- Hidden input for patient ID -->
                    <input type="hidden" name="id" value="<%= person.id %>">
                    
                    <div class="input-group-main">
                        <label for="date">Date:</label>
                        <!--input type="date" id="date" name="date" required-->
                        <input type="datetime-local" id="date" name="date" required>

                    </div>
                    <div class="input-group">
                        <label for="food">Food:</label>
                        <input type="text" id="food" name="food" required>
                    </div>
                    <div class="input-group">
                        <label for="sugarLevelAfterTwoHours">Sugar Level After Two Hours:</label>
                        <input type="text" id="sugarLevelAfterTwoHours" name="sugarLevelAfterTwoHours"
                                pattern="\d+(\.\d+)?"  title="Please enter a number" required>
                    </div>
                    <button type="submit">Submit Entry</button>
                    <div class="spacer"></div>

                    <% if (typeof successMessage !== 'undefined' && successMessage !== null && successMessage.length > 0) { %>
                        <p class="success-message"><%= successMessage %></p>
                    <% } else if (typeof errorMessage  !== 'undefined' && errorMessage  !== null && errorMessage .length > 0) { %>
                        <p class="error-message"><%= errorMessage %></p>
                    <% } %>
                </form>
                <div class="spacer"><hr></hr></div>
                <form id="dateRangeForm" method="post" >
                    <h3>Select dates to display history</h3>
                    <div class="input-group">
                        <label for="startDate">Start Date:</label>
                        <input type="date" id="startDate" name="startDate" required>
                    </div>
                    <div class="input-group">
                        <label for="endDate">End Date:</label>
                        <input type="date" id="endDate" name="endDate" required>
                    </div>
                    <!--input type="hidden" name="id" value="<%= person.id %>"-->
                    <button type="button" id="filterButton" onclick="return setChart()">
                        Show Data
                    </button>
                </form>


                <script type="application/json" id="measurementData">
                    <%- JSON.stringify({
                        conditionsSummary: person.conditionsSummary,
                       
                    })%>
                </script>
                          
                <!-- Inside user_info.ejs after the form element -->
                <div id="graphContainer">
                    <canvas id="sugarChart" width="400" height="200"></canvas>
                </div>


            <% } else { %>
            <p>No user found with the provided ID. Try again</p>
            <button type="back" onclick="location.href='/existing_user'">Back</button>
            <% } %>
            
        </div>

        <script>
            
            function setChart() 
            {
                console.log('validateForm');
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                const measurementDataElement = document.getElementById('measurementData');
                const measurementData = JSON.parse(measurementDataElement.textContent);
                
                console.log('startDate:',startDate,' ,endDate: ', endDate,', measurementData: ', measurementData);

                //start gragh:
                if (typeof measurementData  !== 'undefined' && measurementData  !== null )
                {              
                    const measurements = measurementData.conditionsSummary;
                    console.log('measurements: ', measurements);

                    // Check if filtering should be applied
                    const shouldFilter = (startDate!=='') && (endDate !=='');
                    console.log('Should Filter:', shouldFilter);
                    
                    //get filterd measurments:
                    const filteredMeasurements = shouldFilter
                        ? measurements.filter(measurement => {
                            const measurementDate = new Date(measurement.c1HbAdate);
                            return measurementDate >= new Date(startDate) && measurementDate <= new Date(endDate);
                    })
                    : measurements;
                    const ctx = document.getElementById('sugarChart').getContext('2d');
                    console.log('start if:',sugarChart.style);

                    measurements.sort((a, b) => new Date(a.c1HbAdate) - new Date(b.c1HbAdate));

                    // Check if a chart instance already exists
                    if(!(sugarChart instanceof Chart)) {
                        console.log('createChart: ', filteredMeasurements);
                        createChart(ctx, filteredMeasurements);
                    } else {
                        console.log('updateChart: ', filteredMeasurements);
                        updateChart(sugarChart, filteredMeasurements);
                    }
                } else {
                    console.log('No measurement data available');
                }            
            }

            function createChart(ctx, measurements) 
            {
                const labels = measurements.map(measurement => new Date(measurement.c1HbAdate).toLocaleDateString('en-US'));
                const dataPoints = measurements.map(measurement => measurement.c1HbA);

                sugarChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Sugar Level (mg/dL)',
                            data: dataPoints,
                            borderColor: 'rgb(54, 162, 235)',
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderWidth: 2,
                            pointRadius: 3,
                            fill: false,
                            tension: 0.1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false,
                                suggestedMin: 70, // Minimum value for y-axis
                                suggestedMax: 140, // Maximum value for y-axis
                                title: {
                                    display: true,
                                    text: 'Sugar Level (mg/dL)'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Date of Measurement'
                                }
                            }
                        },
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Sugar Level Over Time',
                                fontSize:50
                            }
                        }
                    }
                });
            }

            // Function to update an existing chart
            function updateChart(chart, measurements) 
            {
                const labels = measurements.map(measurement => new Date(measurement.c1HbAdate).toLocaleDateString('en-US'));
                const dataPoints = measurements.map(measurement => measurement.c1HbA);

                // Update the chart's data
                chart.data.labels = labels;
                chart.data.datasets[0].data = dataPoints;

                // Update the chart
                chart.update();
            }

        </script>        
    </body>
</html>